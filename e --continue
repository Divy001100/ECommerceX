[33mcommit 5cb78a4166c095b23a9b860402fccc17bd31c2c0[m
Author: Divyanshu Singh <202102133@student.apicollege.edu.au>
Date:   Wed Apr 9 01:06:07 2025 +1000

    initial commit

[1mdiff --git a/Public/utils.js/multer/user.js b/Public/utils.js/multer/user.js[m
[1mnew file mode 100644[m
[1mindex 0000000..b6293c5[m
[1m--- /dev/null[m
[1m+++ b/Public/utils.js/multer/user.js[m
[36m@@ -0,0 +1,31 @@[m
[32m+[m[32mconst multer = require('multer')[m
[32m+[m[32mconst sharp = require('sharp')[m
[32m+[m
[32m+[m[32mconst multerStorage = multer.memoryStorage()[m
[32m+[m[32mconst multerFilter =(req,file,cb)=>{[m
[32m+[m[32m    if(file.mimetype.startsWith('image')){[m
[32m+[m[32m     cb(null,true)[m
[32m+[m[32m    }else{[m
[32m+[m[32m        cb(new AppError("please upload a valid image file", 400),false)[m
[32m+[m[32m    }[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mconst upload = multer({[m
[32m+[m[32m    storage:multerStorage,[m
[32m+[m[32m    fileFilter:multerFilter[m
[32m+[m[32m})[m
[32m+[m
[32m+[m[32mexports.uploadUserPhoto =upload.single('photo')[m
[32m+[m
[32m+[m
[32m+[m[32mexports.resizeUserPhoto =(req,res,next)=>{[m
[32m+[m[32m    req.file.filename = `$user-${req.user.id}-${Date.now()}.jpeg`[m
[32m+[m[32m if(!req.file.buffer){[m
[32m+[m[32m    return(next())[m
[32m+[m[32m }[m
[32m+[m[32m sharp(req.file.buffer)[m
[32m+[m[32m .toFormat('jpeg')[m
[32m+[m[32m .jpeg({quality:90})[m
[32m+[m[32m .toFile(`public/img/users/${req.file.filename}`)[m
[32m+[m[32m next()[m
[32m+[m[32m}[m
\ No newline at end of file[m
[1mdiff --git a/controller/authController.js b/controller/authController.js[m
[1mnew file mode 100644[m
[1mindex 0000000..2fa14f2[m
[1m--- /dev/null[m
[1m+++ b/controller/authController.js[m
[36m@@ -0,0 +1,204 @@[m
[32m+[m[32mconst AppError = require('../Public/utils.js/appError')[m
[32m+[m[32mconst catchAsync = require('../Public/utils.js/catchAsync')[m
[32m+[m[32mconst User = require('./../model/userModel')[m
[32m+[m[32mconst JWT = require('jsonwebtoken')[m
[32m+[m[32mconst sendEmail = require('./../Public/utils.js/email')[m
[32m+[m[32mconst SendEmail = require('./..//Public/utils.js/sendEmail')[m
[32m+[m[32mconst crypto = require('crypto')[m
[32m+[m
[32m+[m[32m// token function[m
[32m+[m[32mconst signToken = id=>{[m
[32m+[m[32m    return JWT.sign({id}, process.env.JWT_SECRET,{[m
[32m+[m[32m        expiresIn:process.env.JWT_EXPIRES_IN[m
[32m+[m[32m    })[m
[32m+[m[32m}[m
[32m+[m
[32m+[m
[32m+[m[32mconst createSendToken = (user,statusCode,res)=>{[m
[32m+[m[32mconst token = signToken(user._id)[m
[32m+[m[32mconst cookieOptions = {[m
[32m+[m[32mexpires:new Date(Date.now()+process.env.JWT_COOKIE_EXPIRES_IN[m
[32m+[m[32m*24*60*60*1000),[m
[32m+[m[32mhttpOnly: true[m
[32m+[m[32m}[m
[32m+[m[32mif(process.env.NODE_ENV ==='production'){[m
[32m+[m[32m    cookieOptions.secure=true[m
[32m+[m[32m}[m
[32m+[m
[32m+[m
[32m+[m[32mres.cookie('jwt',token,cookieOptions)[m
[32m+[m
[32m+[m[32mres.status(statusCode).json({[m
[32m+[m[32m    status:"success",[m
[32m+[m[32m    token,[m[41m [m
[32m+[m[32m    data:{[m
[32m+[m[32m        user[m
[32m+[m[32m    }[m
[32m+[m[32m})[m
[32m+[m
[32m+[m[32m}[m
[32m+[m
[32m+[m
[32m+[m[32mexports.signUp =catchAsync(async(req,res,next)=>{[m
[32m+[m[32mconst newUser = await User.create(req.body)[m
[32m+[m
[32m+[m[32m// newUser.password=undefined[m
[32m+[m[32mnewUser.password=undefined[m
[32m+[m[32mnewUser.passwordConfirm = undefined[m
[32m+[m[41m [m
[32m+[m[32mcreateSendToken(newUser,201, res)[m
[32m+[m[32m})[m
[32m+[m
[32m+[m[32mexports.logIn = catchAsync(async(req,res,next)=>{[m
[32m+[m[32m    const{email,password}=req.body[m
[32m+[m[32m    //check if user provider the username and password[m
[32m+[m[32m  if (!email && !password){[m
[32m+[m[32m    next(new AppError("please provide email and password", 400))[m
[32m+[m[32m  }[m
[32m+[m[32m    // 2 check if user exist in db? and password is correct?[m
[32m+[m[32m    const user = await User.findOne({email}).select("+password")[m
[32m+[m[32m//    check password is correct?[m
[32m+[m[32mconst correct = await user.correctPassword(password, user.password)[m
[32m+[m[32mif(!user || !correct){[m
[32m+[m[32m    next(new AppError("Incorrect email and password", 400))[m
[32m+[m[32m}[m
[32m+[m[41m    [m
[32m+[m[32m    // 3 send the token[m[41m   [m
[32m+[m[32m   createSendToken(user,201,res)[m[41m   [m
[32m+[m[32m}[m
[32m+[m[32m)[m
[32m+[m
[32m+[m[32mexports.protect = catchAsync(async (req,res,next)=>{[m
[32m+[m[32m// check if token exist[m[41m [m
[32m+[m[32mlet token;[m
[32m+[m[32mif(req.headers.authorization && req.headers.authorization.startsWith("Bearer")){[m
[32m+[m[32m    token = req.headers.authorization.split(' ')[1][m
[32m+[m[41m    [m
[32m+[m[32m}[m
[32m+[m[32mif(!token){[m
[32m+[m[32m    return next(new AppError("You are not logged in, please login to continue", 401))[m
[32m+[m[32m}[m
[32m+[m[32m// catify the token[m
[32m+[m[32mconst decoded = JWT.verify(token,process.env.JWT_SECRET)[m
[32m+[m[32m// 3 check if user exist from the token[m
[32m+[m[32mconst user = await User.findById(decoded.id)[m
[32m+[m[32mif (!user){[m
[32m+[m[32m   return next(new AppError("invalid token", 404))[m
[32m+[m[32m}[m
[32m+[m[32m// 4 check if password was changed aftetr the token was issued[m
[32m+[m[32mif(user.checkChangedPassword(decoded.iat)){[m
[32m+[m[41m   [m
[32m+[m[32m   return next(new AppError("User recently changed the password, please login again", 401))[m[41m [m
[32m+[m[32m}[m
[32m+[m[32m// grant access to protected route[m
[32m+[m[32mreq.user = user[m
[32m+[m
[32m+[m[32mnext()[m
[32m+[m
[32m+[m[32m})[m
[32m+[m
[32m+[m[32mexports.restrictTo=(...allowedRoles)=>{[m
[32m+[m[32m    return (req,res,next)=>{[m
[32m+[m[32m      if(!allowedRoles.includes(req.user.role)){[m
[32m+[m[32m        next(new AppError(`You do not have permission to perform this action! `, 403))[m
[32m+[m[32m      }[m
[32m+[m[32m      next()[m
[32m+[m[32m    }[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mexports.forgotPassword = catchAsync(async(req,res,next)=>{[m
[32m+[m[41m  [m
[32m+[m[32m    // 1 get user based on provided email[m
[32m+[m[32m    const {email}= req.body[m
[32m+[m[32m    const user = await User.findOne({email})[m
[32m+[m[32m    if(!user){[m
[32m+[m[32m     next (new AppError(`${email} is not a valid email`, 400))[m
[32m+[m[32m    }[m
[32m+[m[41m    [m
[32m+[m[32m    // 2generate a random token[m
[32m+[m[32m    resetToken =await user.createPasswordResetToken()[m
[32m+[m[32m    await user.save({validateBeforeSave:false})[m
[32m+[m[32m    // generate a link to take the user in resetPassword[m
[32m+[m[32m    const resetLink= `${req.protocol}://${req.get('host')}/api/v1/users/resetPassword/${resetToken}`[m
[32m+[m[32m    // 3 send it back to the user's email[m
[32m+[m
[32m+[m[32m    //    await sendEmail({[m
[32m+[m[41m      [m
[32m+[m[32m    //     email:user.email,[m
[32m+[m[32m    //     subject:'Password reset token valid for 10 Minutes',[m
[32m+[m[32m    //     message:`Hi ${user.name}[m
[32m+[m[32m    //     Please reset your password by clicking the link below -${this.link}`[m
[32m+[m[32m    //    } )[m
[32m+[m[32m       const sendmail =new SendEmail(user, resetToken, resetLink)[m
[32m+[m[32m       await sendmail.sendResetEmail()[m
[32m+[m
[32m+[m[32m     res.status(200).json({[m
[32m+[m[32m        status:"success",[m
[32m+[m[32m        resetLink,[m
[32m+[m[32m        resetToken[m
[32m+[m[32m     })[m
[32m+[m[32m})[m
[32m+[m
[32m+[m[32m// reset password[m
[32m+[m
[32m+[m[32mexports.resetPassword= catchAsync(async(req,res,next)=>{[m
[32m+[m[32m    // get 